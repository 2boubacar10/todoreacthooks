{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","CompleteTodo","RemoveTodo","style","textDecoration","isCompleted","className","text","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","todos","setTodos","indice","newTodos","splice","reverse","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAIA,SAASA,EAAT,GAAyD,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,WACzC,OACA,yBAAKC,MAAO,CAACC,eAAgBL,EAAKM,YAAc,eAAiB,IAAKC,UAAU,QAC7EP,EAAKQ,KACN,6BACE,4BAAQD,UAAU,SAASE,QAAS,kBAAMP,EAAaD,KAAvD,WACA,4BAAQM,UAAU,SAASE,QAAS,kBAAMN,EAAWF,KAArD,OAON,SAASS,EAAT,GAA6B,IAAVC,EAAS,EAATA,QAAS,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,KAU1B,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,IACJF,EAAQE,GACRC,EAAS,OAKP,2BACAI,KAAK,OACLX,UAAU,QACVY,YAAY,iBACZN,MAAOA,EACPO,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,WA4DxBS,MArDf,WAAgB,IAAD,EACaV,mBAAS,CACjC,CACEJ,KAAM,eACNF,aAAa,GAEf,CACEE,KAAM,sBACNF,aAAa,GAEf,CACEE,KAAM,oBACNF,aAAa,KAZJ,mBACNiB,EADM,KACCC,EADD,KAuBPrB,EAAa,SAAAsB,GACjB,IAAMC,EAAQ,YAAOH,GACrBG,EAASC,OAAOF,EAAO,GACvBD,EAASE,EAASE,YAKd1B,EAAe,SAAAuB,GACnB,IAAMC,EAAQ,YAAOH,GACrBG,EAASD,GAAQnB,aAAc,EAC/BkB,EAASE,EAASE,YAIpB,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACG,EAAD,CAAUC,QAzBA,SAAAH,GACd,IAEMkB,EAAQ,sBAAOH,EAAMK,WAAb,CAAwB,CAACpB,OAAMF,aAFzB,KAGpBkB,EAASE,MAwBJH,EAAMK,UAAUC,KAAI,SAAC7B,EAAMC,GAAP,OACnB,kBAACF,EAAD,CAAM+B,IAAK7B,EAAOA,MAAOA,EAAOD,KAAMA,EAAME,aAAcA,EAAcC,WAAYA,UC1E1E4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.73ae3762.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\n//composant todo\nfunction Todo ({todo, index, CompleteTodo, RemoveTodo}) {\n  return (\n  <div style={{textDecoration: todo.isCompleted ? 'line-through' : \"\"}} className=\"todo\">\n    {todo.text}\n    <div>\n      <button className=\"button\" onClick={() => CompleteTodo(index)}>Termine</button>\n      <button className=\"button\" onClick={() => RemoveTodo(index)}>X</button>\n    </div>\n  </div>\n  )\n}\n\n//composant ajout todo\nfunction TodoForm({addTodo}){\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(!value) return; //return pour que s'il n'y a pas de valeur, la fonction s'arrete\n    addTodo(value);\n    setValue(\"\");\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n      type=\"text\" \n      className=\"input\"\n      placeholder=\"Ecrire un todo\" \n      value={value} \n      onChange={e => setValue(e.target.value)} /> \n    </form>\n  )\n}\n\n\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      text: \"Premier todo\",\n      isCompleted: false\n    },\n    {\n      text: \"Aller à la poste\",\n      isCompleted: false\n    },\n    {\n      text: \"Revenir au bureau\",\n      isCompleted: false\n    },\n  ]);\n\n  const addTodo = text => {\n    const isCompleted = false;\n    //reverse => renverser le tableau avant d'ajouter l'élément afin d'avoir l'ordre de départ\n    const newTodos = [...todos.reverse(), {text, isCompleted}];\n    setTodos(newTodos);\n  }\n\n  const RemoveTodo = indice => {\n    const newTodos = [...todos];\n    newTodos.splice(indice,1);\n    setTodos(newTodos.reverse());\n  }\n\n  \n\n  const CompleteTodo = indice => {\n    const newTodos = [...todos];\n    newTodos[indice].isCompleted = true;\n    setTodos(newTodos.reverse());\n  }\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        <TodoForm addTodo={addTodo} />\n\n        {/* J'utilise la methode reverse pour renverser le tableau des todos et ensuite map pour faire des iterations dans le tableau todo*/}\n        {todos.reverse().map((todo, index) => (\n          <Todo key={index} index={index} todo={todo} CompleteTodo={CompleteTodo} RemoveTodo={RemoveTodo}/>\n        ))}\n        \n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}